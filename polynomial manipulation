#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
int coeff;
int power;
struct Node* next;
} Node;
Node* createNode(int coeff, int power) {
Node* newNode = (Node*)malloc(sizeof(Node));
newNode->coeff = coeff;
newNode->power = power;
newNode->next = NULL;
return newNode;
}
void insertTerm(Node** head, int coeff, int power) {
Node* newNode = createNode(coeff, power);
if (*head == NULL || (*head)->power < power) {
newNode->next = *head;
*head = newNode;
return;
}
Node* temp = *head;
while (temp->next != NULL && temp->next->power >= power) {
temp = temp->next;
}
if (temp->power == power) {
temp->coeff += coeff;
free(newNode);
} else {
newNode->next = temp->next;
temp->next = newNode;
}
}
void displayPolynomial(Node* head) {
while (head != NULL) {
printf("%dx^%d", head->coeff, head->power);
head = head->next;
if (head != NULL) printf(" + ");
}
printf("\n");
}
Node* addPolynomials(Node* poly1, Node* poly2) {
Node* result = NULL;
while (poly1 != NULL && poly2 != NULL) {
if (poly1->power == poly2->power) {
insertTerm(&result, poly1->coeff + poly2->coeff, poly1->power);
poly1 = poly1->next;
poly2 = poly2->next;
} else if (poly1->power > poly2->power) {
insertTerm(&result, poly1->coeff, poly1->power);
poly1 = poly1->next;
} else {
insertTerm(&result, poly2->coeff, poly2->power);
poly2 = poly2->next;
}
}
while (poly1 != NULL) {
insertTerm(&result, poly1->coeff, poly1->power);
poly1 = poly1->next;
}
while (poly2 != NULL) {
insertTerm(&result, poly2->coeff, poly2->power);
poly2 = poly2->next;
}
return result;
}
Node* subtractPolynomials(Node* poly1, Node* poly2) {
Node* result = NULL;
while (poly1 != NULL && poly2 != NULL) {
if (poly1->power == poly2->power) {
insertTerm(&result, poly1->coeff - poly2->coeff, poly1->power);
poly1 = poly1->next;
poly2 = poly2->next;
} else if (poly1->power > poly2->power) {
insertTerm(&result, poly1->coeff, poly1->power);
poly1 = poly1->next;
} else {
insertTerm(&result, -poly2->coeff, poly2->power);
poly2 = poly2->next;
}
}
while (poly1 != NULL) {
insertTerm(&result, poly1->coeff, poly1->power);
poly1 = poly1->next;
}
while (poly2 != NULL) {
insertTerm(&result, -poly2->coeff, poly2->power);
poly2 = poly2->next;
}
return result;
}
Node* multiplyPolynomials(Node* poly1, Node* poly2) {
Node* result = NULL;
Node* temp1 = poly1;
Node* temp2 = poly2;
while (temp1 != NULL) {
temp2 = poly2;
while (temp2 != NULL) {
insertTerm(&result, temp1->coeff * temp2->coeff, temp1->power + temp2-
>power);
temp2 = temp2->next;
}
temp1 = temp1->next;
}
return result;
}
int main() {
Node* poly1 = NULL;
Node* poly2 = NULL;
insertTerm(&poly1, 5, 2);
insertTerm(&poly1, 4, 1);
insertTerm(&poly1, 2, 0);
insertTerm(&poly2, 5, 1);
insertTerm(&poly2, 5, 0);
printf("Polynomial 1: ");
displayPolynomial(poly1);
printf("Polynomial 2: ");
displayPolynomial(poly2);
Node* sum = addPolynomials(poly1, poly2);
printf("Sum: ");
displayPolynomial(sum);
Node* diff = subtractPolynomials(poly1, poly2);
printf("Difference: ");
displayPolynomial(diff);
Node* prod = multiplyPolynomials(poly1, poly2);
printf("Product: ");
displayPolynomial(prod);
return 0;
}
