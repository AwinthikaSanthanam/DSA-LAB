#include<stdio.h>
#include<stdlib.h>
#define SIZE 10
int hash(int key) {
return key % SIZE;
}
int probe(int H[], int key) {
int index = hash(key);
int i = 0;
while (H[(index + i) % SIZE] != 0)
i++;
return (index + i) % SIZE;
}
void insert(int H[], int key) {
int index = hash(key);
if (H[index] != 0)
index = probe(H, key);
H[index] = key;
}
int search(int H[], int key) {
int index = hash(key);
int i = 0;
while (H[(index + i) % SIZE] != key)
i++;
return (index + i) % SIZE;
}
int main() {
int HT[SIZE] = {0};
insert(HT, 12);
insert(HT, 25);
insert(HT, 35);
insert(HT, 26);
printf("Element found at index: %d\n", search(HT, 35));
return 0;
}
```
Closed Addressing (Chaining):
```c
#include<stdio.h>
#include<stdlib.h>
#define SIZE 10
struct Node {
int data;
struct Node* next;
};
void insert(struct Node* H[], int key) {
int index = key % SIZE;
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = key;
newNode->next = NULL;
if (H[index] == NULL)
H[index] = newNode;
else {
struct Node* temp = H[index];
while (temp->next != NULL)
temp = temp->next;
temp->next = newNode;
}
}
int search(struct Node* H[], int key) {
int index = key % SIZE;
struct Node* temp = H[index];
while (temp != NULL) {
if (temp->data == key)
return index;
temp = temp->next;
}
return -1;
}
int main() {
struct Node* HT[SIZE];
for (int i = 0; i < SIZE; i++)
HT[i] = NULL;
insert(HT, 12);
insert(HT, 25);
insert(HT, 35);
insert(HT, 26);
printf("Element found at index: %d\n", search(HT, 35));
return 0;
}
```
Rehashing:
```c
#include<stdio.h>
#include<stdlib.h>
#define SIZE 10
int hash(int key) {
return key % SIZE;
}
int rehash(int key) {
return (key + 1) % SIZE;
}
void insert(int H[], int key) {
int index = hash(key);
if (H[index] != 0) {
index = rehash(key);
while (H[index] != 0)
index = rehash(key);
}
H[index] = key;
}
int search(int H[], int key) {
int index = hash(key);
int i = 0;
while (H[(index + i) % SIZE] != key)
i++;
return (index + i) % SIZE;
}
int main() {
int HT[SIZE] = {0};
insert(HT, 12);
insert(HT, 25);
insert(HT, 35);
insert(HT, 26);
printf("Element found at index: %d\n", search(HT, 35));
return 0;
}
