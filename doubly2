#include <stdio.h>
#include <stdlib.h>

// Node structure for doubly linked list
struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the beginning of the list
void insertAtBeginning(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        newNode->next = *head;
        (*head)->prev = newNode;
        *head = newNode;
    }
}

// Function to insert a node at the end of the list
void insertAtEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }
}

// Function to delete a node by key
void deleteNode(struct Node** head, int key) {
    if (*head == NULL) {
        printf("List is empty\n");
        return;
    }
    struct Node* current = *head;
    struct Node* prevNode = NULL;

    while (current != NULL && current->data != key) {
        prevNode = current;
        current = current->next;
    }

    if (current == NULL) {
        printf("Key not found\n");
        return;
    }

    if (prevNode == NULL) {
        *head = current->next;
    } else {
        prevNode->next = current->next;
        if (current->next != NULL) {
            current->next->prev = prevNode;
        }
    }
    free(current);
}

// Function to search for a node with a given key
void searchNode(struct Node* head, int key) {
    struct Node* current = head;
    int found = 0;
    while (current != NULL) {
        if (current->data == key) {
            printf("Key found\n");
            found = 1;
            break;
        }
        current = current->next;
    }
    if (!found) {
        printf("Key not found\n");
    }
}

// Function to display the doubly linked list
void display(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Node* head = NULL;
    insertAtBeginning(&head, 5);
    insertAtBeginning(&head, 3);
    insertAtEnd(&head, 7);
    insertAtEnd(&head, 9);
    display(head); // Output: 3 5 7 9
    searchNode(head, 7); // Output: Key found
    searchNode(head, 11); // Output: Key not found
    deleteNode(&head, 5);
    display(head); // Output: 3 7 9
    return 0;
}
